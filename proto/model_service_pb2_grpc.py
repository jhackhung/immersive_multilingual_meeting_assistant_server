# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from proto import model_service_pb2 as model__service__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in model_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TranslatorServiceStub(object):
    """我們可以將服務名稱改得更貼切，例如 TranslatorService
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Translate = channel.unary_unary(
                '/model.v1.TranslatorService/Translate',
                request_serializer=model__service__pb2.TranslateRequest.SerializeToString,
                response_deserializer=model__service__pb2.TranslateResponse.FromString,
                _registered_method=True)


class TranslatorServiceServicer(object):
    """我們可以將服務名稱改得更貼切，例如 TranslatorService
    """

    def Translate(self, request, context):
        """定義一個名為 Translate 的 RPC (遠端程序呼叫)
        它接收 TranslateRequest，並回傳 TranslateResponse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TranslatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Translate': grpc.unary_unary_rpc_method_handler(
                    servicer.Translate,
                    request_deserializer=model__service__pb2.TranslateRequest.FromString,
                    response_serializer=model__service__pb2.TranslateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'model.v1.TranslatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('model.v1.TranslatorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TranslatorService(object):
    """我們可以將服務名稱改得更貼切，例如 TranslatorService
    """

    @staticmethod
    def Translate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model.v1.TranslatorService/Translate',
            model__service__pb2.TranslateRequest.SerializeToString,
            model__service__pb2.TranslateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MediaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Wav2Lip = channel.unary_unary(
                '/model.v1.MediaService/Wav2Lip',
                request_serializer=model__service__pb2.Wav2LipRequest.SerializeToString,
                response_deserializer=model__service__pb2.Wav2LipResponse.FromString,
                _registered_method=True)
        self.Tts = channel.unary_unary(
                '/model.v1.MediaService/Tts',
                request_serializer=model__service__pb2.TtsRequest.SerializeToString,
                response_deserializer=model__service__pb2.TtsResponse.FromString,
                _registered_method=True)
        self.SpeakerAnnote = channel.unary_unary(
                '/model.v1.MediaService/SpeakerAnnote',
                request_serializer=model__service__pb2.SpeakerAnnoteRequest.SerializeToString,
                response_deserializer=model__service__pb2.SpeakerAnnoteResponse.FromString,
                _registered_method=True)


class MediaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Wav2Lip(self, request, context):
        """1. Wav2Lip: 根據音訊和圖片產生對嘴影片
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Tts(self, request, context):
        """2. TTS (Text-to-Speech): 將文字轉換為語音
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpeakerAnnote(self, request, context):
        """3. SpeakerAnnote (Speaker Annotation/Diarization): 說話者日誌
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MediaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Wav2Lip': grpc.unary_unary_rpc_method_handler(
                    servicer.Wav2Lip,
                    request_deserializer=model__service__pb2.Wav2LipRequest.FromString,
                    response_serializer=model__service__pb2.Wav2LipResponse.SerializeToString,
            ),
            'Tts': grpc.unary_unary_rpc_method_handler(
                    servicer.Tts,
                    request_deserializer=model__service__pb2.TtsRequest.FromString,
                    response_serializer=model__service__pb2.TtsResponse.SerializeToString,
            ),
            'SpeakerAnnote': grpc.unary_unary_rpc_method_handler(
                    servicer.SpeakerAnnote,
                    request_deserializer=model__service__pb2.SpeakerAnnoteRequest.FromString,
                    response_serializer=model__service__pb2.SpeakerAnnoteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'model.v1.MediaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('model.v1.MediaService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MediaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Wav2Lip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model.v1.MediaService/Wav2Lip',
            model__service__pb2.Wav2LipRequest.SerializeToString,
            model__service__pb2.Wav2LipResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Tts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model.v1.MediaService/Tts',
            model__service__pb2.TtsRequest.SerializeToString,
            model__service__pb2.TtsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpeakerAnnote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model.v1.MediaService/SpeakerAnnote',
            model__service__pb2.SpeakerAnnoteRequest.SerializeToString,
            model__service__pb2.SpeakerAnnoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
